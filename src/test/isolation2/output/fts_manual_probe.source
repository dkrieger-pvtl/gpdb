-- See src/backend/fts/README for background information

-- This test is for two scenarios:
-- 1) Ensuring fresh results when a probe is requested while a scan is already
-- in progress.

-- 2) Ensuring that when multiple probe requests come in before the start of a
-- new probe, then all those requests share the same result (ie: piggyback).


include: helpers/server_helpers.sql;
CREATE

create extension if not exists gp_inject_fault;
CREATE
select gp_inject_fault('all', 'reset', 1);
 gp_inject_fault 
-----------------
 t               
(1 row)

-- create extension only on master since the FTS process is only on master
CREATE OR REPLACE FUNCTION gp_fts_probe_stats() RETURNS TABLE ( fts_probe_started int8, fts_probe_done int8, fts_statusVersion int2 ) AS '/@abs_builddir@/../regress/regress.so', 'gp_fts_probe_stats' LANGUAGE C EXECUTE ON MASTER READS SQL DATA;
CREATE

create temp table gp_fts_probe_stats_before(fts_probe_started_before int, fts_probe_done_before int);
CREATE

-- ensure the internal regular probes do not affect our test
!\retcode gpconfig -c gp_fts_probe_interval -v 3600;
-- start_ignore
20190724:11:56:36:083676 gpconfig:seale:pivotal-[INFO]:-completed successfully with parameters '-c gp_fts_probe_interval -v 3600'

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
20190724:11:56:36:083751 gpstop:seale:pivotal-[INFO]:-Starting gpstop with args: -u
20190724:11:56:36:083751 gpstop:seale:pivotal-[INFO]:-Gathering information and validating the environment...
20190724:11:56:36:083751 gpstop:seale:pivotal-[INFO]:-Obtaining Greenplum Master catalog information
20190724:11:56:36:083751 gpstop:seale:pivotal-[INFO]:-Obtaining Segment details from master...
20190724:11:56:37:083751 gpstop:seale:pivotal-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 7.0.0-alpha.0+dev.574.g422bf20592 build dev'
20190724:11:56:37:083751 gpstop:seale:pivotal-[INFO]:-Signalling all postmaster processes to reload

-- end_ignore
(exited with code 0)

select gp_inject_fault_infinite('fts_before_probe', 'suspend', 1);
 gp_inject_fault_infinite 
--------------------------
 t                        
(1 row)
select gp_inject_fault_infinite('fts_after_probe', 'suspend', 1);
 gp_inject_fault_infinite 
--------------------------
 t                        
(1 row)

-- start three probe requests and suspend before incrementing the start tick
-- they should all share the same results
1&: select gp_request_fts_probe_scan();  <waiting ...>
2&: select gp_request_fts_probe_scan();  <waiting ...>
3&: select gp_request_fts_probe_scan();  <waiting ...>
select gp_wait_until_triggered_fault('fts_before_probe', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 t                             
(1 row)

-- cache the initial probe stats
insert into gp_fts_probe_stats_before (select fts_probe_started, fts_probe_done from gp_fts_probe_stats());
INSERT 1

select gp_inject_fault('fts_before_probe', 'resume', 1);
 gp_inject_fault 
-----------------
 t               
(1 row)
select gp_wait_until_triggered_fault('fts_after_probe', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 t                             
(1 row)

-- request a fourth probe request during an in-progress probe scan
-- this should not be lost and should return with fresh results
4&: select gp_request_fts_probe_scan();  <waiting ...>

select gp_inject_fault('fts_after_probe', 'resume', 1);
 gp_inject_fault 
-----------------
 t               
(1 row)
1<:  <... completed>
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
2<:  <... completed>
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
3<:  <... completed>
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
4<:  <... completed>
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)

-- calculate the number of probe scans requested
select (after.fts_probe_started - before.fts_probe_started_before) started_delta, (after.fts_probe_done - before.fts_probe_done_before) done_delta from gp_fts_probe_stats() as after, gp_fts_probe_stats_before as before;
 started_delta | done_delta 
---------------+------------
 2             | 2          
(1 row)

-- reset the internal regular probe interval
!\retcode gpconfig -r gp_fts_probe_interval;
-- start_ignore
20190724:11:56:42:083783 gpconfig:seale:pivotal-[INFO]:-completed successfully with parameters '-r gp_fts_probe_interval'

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore
20190724:11:56:43:083857 gpstop:seale:pivotal-[INFO]:-Starting gpstop with args: -u
20190724:11:56:43:083857 gpstop:seale:pivotal-[INFO]:-Gathering information and validating the environment...
20190724:11:56:43:083857 gpstop:seale:pivotal-[INFO]:-Obtaining Greenplum Master catalog information
20190724:11:56:43:083857 gpstop:seale:pivotal-[INFO]:-Obtaining Segment details from master...
20190724:11:56:43:083857 gpstop:seale:pivotal-[INFO]:-Greenplum Version: 'postgres (Greenplum Database) 7.0.0-alpha.0+dev.574.g422bf20592 build dev'
20190724:11:56:43:083857 gpstop:seale:pivotal-[INFO]:-Signalling all postmaster processes to reload

-- end_ignore
(exited with code 0)
